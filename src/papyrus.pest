WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ multiline_style1 | multiline_style2 | line_comment }
	multiline_style1 = _{"{" ~ (!"}" ~ ANY)* ~ "}"}
	multiline_style2 = _{";/" ~ (!"/;" ~ ANY)* ~ "/;"}
	line_comment = _{";" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI)}

module = _ { SOI ~ header? ~ body ~ EOI }
	// https://www.creationkit.com/fallout4/index.php?title=Script_File_Structure#Script_Extension
	header = { ^"ScriptName" ~ ident ~ (^"Extends" ~ type)? ~ header_flag* }
		header_flag = { ^"Conditional" | ^"Const" | ^"DebugOnly" | ^"BetaOnly" | ^"Hidden" | ^"Native" | ^"Default" }

keyword = @{
	(
		/*
			Skyrim Keywords
			^"As" | ^"Auto" | ^"AutoReadOnly" | ^"Conditional" | ^"Else" | ^"ElseIf" |
			^"EndEvent" | ^"EndFunction" | ^"EndIf" | ^"EndProperty" |^"EndState" |
			^"EndWhile" | ^"Event" | ^"Extends" | ^"False" | ^"Function" | ^"Global" |
			^"Hidden" | ^"If" | ^"Import" | ^"Length" | ^"Native" | ^"New" | ^"None" |
			^"Parent" | ^"Property" | ^"Return" | ^"ScriptName" | ^"Self" | ^"State" |
			^"True" | ^"While"
		*/

		^"As" | ^"Auto" | ^"AutoReadOnly" | ^"BetaOnly" | ^"Collapsed" |
		^"CollapsedOnBase" | ^"CollapsedOnRef" | ^"Conditional" | ^"Const" |
		^"CustomEvent" | ^"DebugOnly" | ^"Default" | ^"ElseIf" | ^"Else" |
		^"EndEvent" | ^"EndFunction" | ^"EndGroup" | ^"EndIf" | ^"EndProperty" |
		^"EndState" | ^"EndStruct" | ^"EndWhile" | ^"Event" | ^"Extends" |
		^"False" | ^"Function" | ^"Global" | ^"Group" | ^"Hidden" | ^"If" |
		^"Import" | ^"Is" /*| ^"Length"*/ | ^"Mandatory" | ^"Native" | ^"New" |
		^"None" | ^"Parent" | ^"Property" | ^"Return" | ^"ScriptName" |
		/*^"Self" |*/ ^"State" | ^"Struct" | ^"True" | ^"While"
	) ~ !ASCII_ALPHANUMERIC
}

type = ${ (!keyword ~ ( ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* )) ~ (WHITESPACE? ~ "[]")? }


body = { (statement | expression)* }

statement = { if | while | group | event | state | struct | property | function | definition | assignment | compound_assignment | return | declaration }
	group = { ^"Group" ~ ident ~ (^"CollapsedOnRef" | ^"CollapsedOnBase" | ^"Collapsed")? ~ body ~ ^"EndGroup" }

	property = _{ full_property | const_property | auto_property }
		full_property = { type ~ ^"Property" ~ ident ~ (function ~ function?) ~ ^"EndProperty" ~ (^"Mandatory" | ^"Hidden")* }
		const_property = { type ~ ^"Property" ~ ident ~ "=" ~ expression ~ ^"AutoReadOnly" ~ (^"Mandatory" | ^"Hidden")* }
		auto_property = { type ~ ^"Property" ~ ident ~ ("=" ~ expression)? ~ (^"Const" | ^"Mandatory" | ^"Conditional" | ^"Hidden")* ~ ^"Auto" ~ (^"Const" | ^"Mandatory" | ^"Conditional" | ^"Hidden")* }

	struct = { ^"Struct" ~ ident ~ struct_field+ ~ ^"EndStruct" }
		struct_field = { type ~ ident ~ ("=" ~ expression)? ~ ^"Hidden"? }

	state = _{ auto_state | normal_state }
		auto_state = { ^"Auto" ~ ^"State" ~ ident ~ body ~ ^"EndState" }
		normal_state = { ^"State" ~ ident ~ body ~ ^"EndState" }

	event = { ^"Event" ~ ident ~ parameters ~ body ~ ^"EndEvent" }

	// Control flow
	if = { ^"If" ~ expression ~ (!elseif ~ body)? ~ elseif* ~ else? ~ ^"EndIf" }
		elseif = { ^"ElseIf" ~ expression ~ body }
		else = _{ ^"Else" ~ body }
	while = { ^"While" ~ expression ~ body ~ ^"EndWhile" }

	function = _{ native_function | global_function | method_function }
		native_function = { type? ~ ^"Function" ~ ident ~ parameters ~ ^"Global"? ~ ^"Native" ~ ^"Global"? }
		global_function = { type? ~ ^"Function" ~ ident ~ parameters ~ ^"Global" ~ body ~ ^"EndFunction" }
		method_function = { type? ~ ^"Function" ~ ident ~ parameters ~ body ~ ^"EndFunction" }
	return = { ^"Return" ~ expression? }

	assignment = { ident ~ (dot_index | bracket_index)* ~ "=" ~ expression }
		dot_index = { "." ~ ident }
		bracket_index = { "[" ~ expression ~ "]" }
	compound_assignment = { ident ~ ("+=" | "-=" | "*=" | "/=" | "%=") ~ expression }

	definition = { type ~ ident ~ "=" ~ expression ~ ^"Const"? }
	declaration = ${ type ~ (WHITESPACE | COMMENT) ~ ident ~ ((WHITESPACE | COMMENT) ~ ^"Const")? ~ (WHITESPACE | COMMENT | EOI) }

	parameters = { "(" ~ (parameter ~ ",")* ~ parameter? ~ ")" }
		parameter = { type ~ ident ~ ("=" ~ expression)? }

expression = { expr ~ (infix ~ expr)* }
	expr = _{ prefix* ~ operand ~ postfix* }
	infix = _{ arithmetic | comparison | logical }
		arithmetic = _{ op_add | op_sub | op_mul | op_div | op_mod }
			op_add = { "+" }
			op_sub = { "-" }
			op_mul = { "*" }
			op_div = { "/" }
			op_mod = { "%" }
		comparison = _{ op_eq | op_neq | op_geq | op_gt | op_leq | op_lt }
			op_eq = { "==" }
			op_neq = { "!=" }
			op_geq = { ">=" }
			op_gt = { ">" }
			op_leq = { "<=" }
			op_lt = { "<" }
		logical = _{ op_and | op_or }
			op_and = { "&&" }
			op_or = { "||" }
	prefix = _{ neg | not } // might have + operator too.
		neg = { "-" }
		not = { "!" }
	postfix = _{ type_check | cast | call | dot_index | bracket_index }
		call = { "(" ~ arguments ~ ")" }
			arguments = { (argument ~ ",")* ~ argument? }
				argument = { (ident ~ "=")? ~ expression }
		cast = { ^"As" ~ type }
		type_check = { ^"Is" ~ type }

operand = _{ "(" ~ expression ~ ")" | literal | ident }
	literal = _{ string | number | boolean | none | array }
		string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" } // Todo: Escapes
		number = _{ hexadecimal | decimal | integer }
			hexadecimal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
			decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ "f"? }
			integer = @{ ASCII_DIGIT+ }
		boolean = { ^"True" | ^"False" }
		array = { ^"New" ~ type ~ "[" ~ expression ~ "]" }
		none = { ^"None" }
	ident = @{ !keyword ~ ( ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* ) }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ multiline_style1 | multiline_style2 | line_comment }
	multiline_style1 = _{"{" ~ (!"}" ~ ANY)* ~ "}"}
	multiline_style2 = _{";/" ~ (!"/;" ~ ANY)* ~ "/;"}
	line_comment = _{";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE}

module = _ { SOI ~ heading* ~ body ~ EOI }

keyword = _{
	^"Function" | ^"EndFunction" |
	^"Property" | ^"EndProperty" |
	^"Event" | ^"EndEvent" |
	^"State" | ^"EndState" |
	^"Group" | ^"EndGroup" |

	^"If" | ^"Elseif" | ^"EndIf" |

	^"Auto" | ^"Conditional" | ^"Extends" |
	^"Return" | ^"New" |
	^"Const" | ^"Native" | ^"Global" | ^"Conditional" | ^"Mandatory"
}

type = { ident ~ "[]"? }

heading = _{ script_name }
	script_name = { ^"ScriptName" ~ ident ~ (^"Hidden" | (^"Extends" ~ type)) ~ ^"Conditional"? }


body = { (statement | expression)* }

statement = _{ if | group | property | function | definition | event | while | state | assignment | compound_assignment | declaration }
	group = { ^"Group" ~ ident ~ ^"CollapsedOnRef"? ~ property+ ~ ^"EndGroup" }

	property = _{ full_property | auto_property | const_property }
		full_property = { type ~ ^"Property" ~ ident ~ (function ~ function?) ~ ^"EndProperty" }
		// auto_conditional_property = { (^"Int" | ^"Float" | ^"Bool") ~ ^"Property" ~ ident ~ ^"Auto" ~ ^"Conditional" }
		auto_property = { type ~ ^"Property" ~ ident ~ ("=" ~ expression)? ~ ^"Auto" ~ (^"Const" | ^"Mandatory" | ^"Conditional")* }
		const_property = { type ~ ^"Property" ~ ident ~ "=" ~ expression ~ ^"AutoReadOnly" }

	state = _{ auto_state | normal_state }
		auto_state = { ^"Auto" ~ ^"State" ~ ident ~ body ~ ^"EndState" }
		normal_state = { ^"State" ~ ident ~ body ~ ^"EndState" }

	event = { ^"Event" ~ ident ~ parameters ~ body ~ ^"EndEvent" }

	// Control flow
	if = { ^"If" ~ expression ~ body ~ elifs ~ (^"Else" ~ body)? ~ ^"EndIf" }
		elifs = { (^"ElseIf" ~ expression ~ body)* }
	while = { ^"While" ~ expression ~ body ~ ^"EndWhile" }

	function = _{ native_function | global_function | method_function }
		native_function = { function_start ~ ident ~ parameters ~ ^"Global"? ~ ^"Native" ~ ^"Global"? }
		global_function = { function_start ~ ident ~ parameters ~ ^"Global" ~ (statement | expression | return)* ~ ^"EndFunction" }
		method_function = { function_start ~ ident ~ parameters ~ (statement | expression | return)* ~ ^"EndFunction" }
			function_start = @{ (type ~ WHITESPACE)? ~ ^"Function" }
	return = { ^"Return" ~ expression? }

	assignment = { ident ~ ("." ~ ident)* ~ "=" ~ expression }
	compound_assignment = { ident ~ ("+=" | "-=" | "*=" | "/=" | "%=") ~ expression }

	definition = { type ~ ident ~ "=" ~ expression ~ ^"Const"? }
	declaration = @{ type ~ WHITESPACE ~ ident ~ (WHITESPACE ~ ^"Const")? ~ (WHITESPACE | COMMENT | EOI) }

	parameters = { "(" ~ (parameter ~ ",")* ~ parameter? ~ ")" }
		parameter = _{ type ~ ident ~ ("=" ~ expression)? }

expression = { expr ~ (infix ~ expr)* }
	expr = _{ prefix* ~ operand ~ postfix* }
	infix = _{ arithmetic | comparison | logical }
		arithmetic = _{ op_add | op_sub | op_mul | op_div | op_mod }
			op_add = { "+" }
			op_sub = { "-" }
			op_mul = { "*" }
			op_div = { "/" }
			op_mod = { "%" }
		comparison = _{ op_eq | op_neq | op_geq | op_gt | op_leq | op_lt }
			op_eq = { "==" }
			op_neq = { "!=" }
			op_geq = { ">=" }
			op_gt = { ">" }
			op_leq = { "<=" }
			op_lt = { "<" }
		logical = { "&&" | "||" }
	prefix = _{ neg | not } // might have + operator too.
		neg = { "-" }
		not = { "!" }
	postfix = { type_check | cast | call | dot_index | expr_index }
		call = { "(" ~ arguments ~ ")" }
			arguments = { (expression ~ ",")* ~ expression? }
		cast = { ^"As" ~ type }
		type_check = { ^"Is" ~ type }
		dot_index = { "." ~ ident }
		expr_index = { "[" ~ expression ~ "]" }

operand = _{ "(" ~ expression ~ ")" | literal | ident }
	literal = _{ string | number | boolean | array }
		string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" } // Todo: Escapes
		number = _{ hexadecimal | decimal | integer }
			hexadecimal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
			decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ "f"? }
			integer = @{ ASCII_DIGIT+ }
		boolean = { ^"True" | ^"False" }
		array = { ^"New" ~ type ~ "[" ~ expression ~ "]" }
	ident = @{ !keyword ~ ( ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* ) }
